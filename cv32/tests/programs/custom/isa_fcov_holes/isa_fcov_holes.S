# CSR access test
# Generated by gen_csr_test.py (part of riscv-dv)
# Manual edits to fit with BSP and enhance debug
.include "user_define.h"
.section .text.start
.globl _start
.section .text
#.include "user_init.s"
.type _start, @function

_start:
    j _start_main

.globl _start_main
.section .text
_start_main:

	#ifdef NO_PULP
	#define EXP_MISA 0x40001104
	#else
	#define EXP_MISA 0x40801104
	#endif

###############################################################################
# Generated code starts...
###############################################################################
_start0:
	# mcycle
	li x7, 0xa5a5a5a5
	csrrw x12, 2816, x7
	li x7, 0x00000000
	bne x7, x12, csr_fail
	li x7, 0x5a5a5a5a
	csrrw x12, 2816, x7
	li x7, 0xa5a5a5a5
	bne x7, x12, csr_fail
	li x7, 0xd5583a6b
	csrrw x12, 2816, x7
	li x7, 0x5a5a5a5a
	bne x7, x12, csr_fail
	li x7, 0xa5a5a5a5
	csrrs x12, 2816, x7
	li x7, 0xd5583a6b
	bne x7, x12, csr_fail
	li x7, 0x5a5a5a5a
	csrrs x12, 2816, x7
	li x7, 0xf5fdbfef
	bne x7, x12, csr_fail
	li x7, 0x1ac809f1
	csrrs x12, 2816, x7
	li x7, 0xffffffff
	bne x7, x12, csr_fail
	li x7, 0xa5a5a5a5
	csrrc x12, 2816, x7
	li x7, 0xffffffff
	bne x7, x12, csr_fail
	li x7, 0x5a5a5a5a
	csrrc x12, 2816, x7
	li x7, 0x5a5a5a5a
	bne x7, x12, csr_fail
	li x7, 0xe34ffa80
	csrrc x12, 2816, x7
	li x7, 0x00000000
	bne x7, x12, csr_fail
	csrrwi x12, 2816, 0b00101
	li x7, 0x00000000
	bne x7, x12, csr_fail
	csrrwi x12, 2816, 0b11010
	li x7, 0x00000005
	bne x7, x12, csr_fail
	csrrwi x12, 2816, 0b01111
	li x7, 0x0000001a
	bne x7, x12, csr_fail
	csrrsi x12, 2816, 0b00101
	li x7, 0x0000000f
	bne x7, x12, csr_fail
	csrrsi x12, 2816, 0b11010
	li x7, 0x0000000f
	bne x7, x12, csr_fail
	csrrsi x12, 2816, 0b01100
	li x7, 0x0000001f
	bne x7, x12, csr_fail
	csrrci x12, 2816, 0b00101
	li x7, 0x0000001f
	bne x7, x12, csr_fail
	csrrci x12, 2816, 0b11010
	li x7, 0x0000001a
	bne x7, x12, csr_fail
	csrrci x12, 2816, 0b11001
	li x7, 0x00000000
	bne x7, x12, csr_fail

################################################################################
# Generated code ends...
################################################################################
# Hit those coverage holes with manually generated code...
################################################################################

  li x1, 0xFFFFFFFF
holes:
  beq x0, x1, test_done
  li x1, 0x00000000
  srli x2, x0, 0b000100  # hole: rd is never x2
  beq x0, x7, holes      # hole: negative branch
  li x4, 0x00000002
  jalr    x0, x4, 0      # jump to the second nop
  nop
  nop
  nop

  add x2, x0, x4         # hole: rs1==x0
  add x2, x0, x1
  and x2, x25, x26       # hole: rs1==x25

  lw x2, 0(x0)           # hole: load/stire with rs1==x0
  lw x3, 4(x0)
  sw x2, 0(x0)
  sw x2, 4(x0)

test_done:
    lui a0,print_port>>12
    addi a1,zero,'\n'
    sw a1,0(a0)
    addi a1,zero,'C'
    sw a1,0(a0)
    addi a1,zero,'V'
    sw a1,0(a0)
    addi a1,zero,'3'
    sw a1,0(a0)
    addi a1,zero,'2'
    sw a1,0(a0)
    addi a1,zero,' '
    sw a1,0(a0)
    addi a1,zero,'D'
    sw a1,0(a0)
    addi a1,zero,'O'
    sw a1,0(a0)
    addi a1,zero,'N'
    sw a1,0(a0)
    addi a1,zero,'E'
    sw a1,0(a0)
    addi a1,zero,'\n'
    sw a1,0(a0)
    sw a1,0(a0)

csr_pass:
    li x18, 123456789
    li x17, 0x20000000
    sw x18,0(x17)
    wfi

csr_fail:
    lui a0,print_port>>12
    addi a1,zero,'\n'
    sw a1,0(a0)
    addi a1,zero,'C'
    sw a1,0(a0)
    addi a1,zero,'V'
    sw a1,0(a0)
    addi a1,zero,'3'
    sw a1,0(a0)
    addi a1,zero,'2'
    sw a1,0(a0)
    addi a1,zero,' '
    sw a1,0(a0)
    addi a1,zero,'F'
    sw a1,0(a0)
    addi a1,zero,'A'
    sw a1,0(a0)
    addi a1,zero,'I'
    sw a1,0(a0)
    addi a1,zero,'L'
    sw a1,0(a0)
    addi a1,zero,'\n'
    sw a1,0(a0)
    sw a1,0(a0)

    li x18, 1
    li x17, 0x20000000
    sw x18,0(x17)
    wfi
#
# end
#
