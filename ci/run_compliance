#! /usr/bin/env python3
################################################################################
#
# Copyright 2020 OpenHW Group
# 
# Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://solderpad.org/licenses/
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier:Apache-2.0 WITH SHL-2.0
# 
################################################################################
#
# run_compliance: the main purpose of this script is to produce the .metrics.json
#                 test-list for the RISC-V test-suite.  It will also (optionally)
#                 run the tests. Used in conjunction with targets in the uvmt_cv32
#                 Makefiles.
#
# Author: Mike Thompson
#  email: mike@openhwgroup.org
#
# Written with Python 3.5.3 on Debian 9.  Your python mileage may vary.
#
# Restriction:
#     - Needs to be launched from the ci directory.
#
# TODO:
################################################################################

import json
import sys
import os
import argparse
import subprocess
import re

if (sys.version_info < (3,0,0)):
    print ('Requires python 3')
    exit(1)

################################################################################
# This script is run from the "ci" directory, but the paths used by simulator
# commands assume we are at the root of the repo.
topdir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
print('ci_check: topdir  : {}'.format(topdir))


################################################################################
# Methods....

# This script may do some unexpected things, so give the user an escape hatch.
def ask_user():
    txt = input("Is this what you want [Y/N]? ")
    if not ((txt == 'Y') or (txt == 'y')):
        exit(1)

################################################################################
# Command-line arguments

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--debug",         help="Display debug messages",               action="store_true")
parser.add_argument("-p", "--print_command", help="Print commands to stdout, do not run", action="store_true")
parser.add_argument("-j", "--json",          help="Write out .metrics.json",              action="store_true")
parser.add_argument("-s", "--simulator",     help="SystemVerilog simulator",              choices=['dsim', 'xrun', 'vsim', 'vcs'])
parser.add_argument("-i", "--isa",           help="RISC-V ISA",                           choices=['rv32i', 'rv32im', 'rv32imc', 'rv32Zicsr', 'rv32Zifencei'])


args   = parser.parse_args()

if (args.simulator == None):
    print ('No simulator specifed...  assuming SIMULATOR shell variable is set')
    #ask_user()
else:
    svtool = args.simulator

if (args.isa == None):
    print ('No ISA specified, running rv32i')
    riscv_isa = 'rv32i'
    ask_user()
else:
    riscv_isa = args.isa

################################################################################
# script starts here

inputdir = '../vendor_lib/riscv/riscv-compliance/work/' + riscv_isa
for isafile in os.listdir(inputdir):
    file_name, file_extn = os.path.splitext(isafile)
    if (args.debug):
        print ('file_name :' + file_name)
        print ('file_extn :' + file_extn)
    if (file_extn == '.hex'):
        if (args.json):
            print ('          {')
            print ('            "name":        "RISCV_COMPLIANCE_' + file_name + '",')
            print ('            "build":       "uvmt_cv32_compliance_build",')
            print ('            "cmd":         "cd cv32/sim/uvmt_cv32; make compliance RISCV_ISA=' + riscv_isa + ' COMPLIANCE_PROG=' + file_name + ' SIMULATOR=dsim USE_ISS=YES DSIM_WORK=/mux-flow/build/repo/dsim_work DSIM_RESULTS=/mux-flow/build/results",')
            print ('            "wavesCmd":    "cd cv32/sim/uvmt_cv32; make compliance RISCV_ISA=' + riscv_isa + ' COMPLIANCE_PROG=' + file_name + ' SIMULATOR=dsim USE_ISS=YES DSIM_WORK=/mux-flow/build/repo/dsim_work DSIM_RESULTS=/mux-flow/build/results WAVES=1 DSIM_DMP_FILE=' + file_name + '.vcd",')
            print ('            "metricsFile": "' + file_name + '/metrics.db",')
            print ('            "wavesFile" :  "' + file_name + '/hello-world.vcd",')
            print ('            "isPass":      "SIMULATION PASSED",')
            print ('            "seed":        1')
            print ('          },')
        else:
            make_cmd = 'make compliance ' + 'RISCV_ISA=' + riscv_isa + ' COMPLIANCE_PROG=' + file_name
            os.chdir('../cv32/sim/uvmt_cv32')
            if (args.debug or args.print_command):
                print (make_cmd)
            if (not args.print_command):
                os.system(make_cmd)
            os.chdir('../../../ci')

exit(0)
## end ##
