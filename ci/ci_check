#! /usr/bin/python3
################################################################################
#
# Copyright 2020 OpenHW Group
# 
# Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://solderpad.org/licenses/
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
################################################################################
#
# ci_check: python script to run a sanity regression before launching a full-
#           blown regression.  Uses the same .metrics.json control script as
#           the Metrics CI tool-chain.  Compiles and executes whatever is
#           listed in the "regressions" list-of-disctionaries.
#
# Author: Mike Thompson
#  email: mike@openhwgroup.org
#
# Written in Python 3.6.9 on Ubuntu 18.04.  Your python mileage may vary.
#
# Restriction:
#     - Needs to be launched from the ci directory.
#     - Blindly uses .metrics.json wih no ability for user over-ride.
#
# TODO:
#      0. Command-line argument to select the simulator.
#      1. Automatically check results using the "isPass" key.
#      2. Create a "sanity-regression" in .metrics.json and use that here.
#      3. Don't assume DSIM_WORK and DSIM_RESULTS are always at the end of the
#         "cmd" key.
#      4. Intelligent command-line args for 'debug' and 'prcmd'.
#      5. Can I always assume p3 is located at /usr/bin/python3?
################################################################################

import json
import sys
import os

debug = 0   # warning, too much info!
prcmd = 0   # prints cmds to stdout

if (len(sys.argv) == 3):
    if (sys.argv[1] != ''):
        prcmd = 1
    if (sys.argv[2] != ''):
        debug = 1

if (len(sys.argv) == 2):
    if (sys.argv[1] != ''):
        prcmd = 1

os.chdir('../')
topdir = os.getcwd()

with open('.metrics.json') as f:
  metrics_dict = json.load(f)

# Get the build command
for key in metrics_dict:
    if (key == 'builds'):
        builds_dict = metrics_dict['builds']
        if (debug):
            print (json.dumps(builds_dict, indent=2, sort_keys=True))
        for key in builds_dict:
            if (key == 'list'):
               list_dict = builds_dict['list']
               if (debug):
                   print (json.dumps(list_dict, indent=2, sort_keys=True))
        for key in list_dict:
            build_cmd_list = (key['cmd']).split()
            build_cmd = ' '.join(build_cmd_list[0:-1]) # See TODO #3
            if (build_cmd != ''):
                if (prcmd or debug):
                    print(build_cmd)
                else:
                    os.system(build_cmd)
                    os.chdir(topdir)      # cmd in .metrics.json assumes all cmds start from here
            else:
                print ('ERROR: cannot find build command in .metrics.json')
                exit(0)

# Get the simulation command(s)
for key in metrics_dict:
    if (key == 'regressions'):
        regressions_dict = metrics_dict['regressions']
        if (debug):
            print (json.dumps(regressions_dict, indent=2))
        for item in regressions_dict:
            if (debug):
                print(item['tests'])
            tests_dict = item['tests']
            if (debug):
               print (json.dumps(tests_dict, indent=2))
            for key in tests_dict:
                if (key == 'list'):
                   lists_dict = tests_dict['list']
                   if (debug):
                       print (json.dumps(lists_dict, indent=2))
            for key in lists_dict:
                run_cmd_list = (key['cmd']).split()
                run_cmd = ' '.join(run_cmd_list[0:-2]) # See TODO #3
                if (run_cmd != ''):
                    if (prcmd or debug):
                        print(run_cmd)
                    else:
                        os.system(run_cmd)
                        os.chdir(topdir)      # cmd in .metrics.json assumes all cmds start from here
                else:
                    print ('ERROR: cannot find run command in .metrics.json')
                    exit(0)

# end
